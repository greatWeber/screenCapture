body,
h1,
h2,
h3,
p,
img,
input,
textarea,
li,
ul,
ol {
  padding: 0;
  margin: 0;
}
li {
  list-style: none;
}
a {
  text-decoration: none;
}
input,
textarea {
  outline: none;
  resize: none;
}
.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.i-b {
  display: inline-block;
}
.v-m {
  vertical-align: middle;
}
.t-c {
  text-align: center;
}
.flex {
  display: flex;
}
.flex-item {
  flex: 1;
}
.flex-row {
  flex-direction: row;
}
.flex-colmun {
  flex-direction: column;
}
.align-center {
  align-items: center;
}
.flex-center {
  justify-content: center;
}
.space-around {
  justify-content: space-around;
}
.space-between {
  justify-content: space-between;
}
.screenCapture-wrapper {
  width: 100vw;
  height: 100vh;
  position: fixed;
  left: 0;
  top: 0;
  z-index: 99999;
  background: transparent;
  box-sizing: border-box;
  border: 3px solid #539BED;
}
.screenCapture-wrapper-show {
  background: rgba(0, 0, 0, 0.5);
}
.screenCapture-number-view {
  width: 100px;
  height: 100px;
  border: 1px solid #539BED;
  transform: translate(200px, 200px);
  background: transparent;
  position: relative;
}
.screenCapture-number-view .screenCapture-selectbox {
  position: absolute;
  bottom: -35px;
  right: 0;
  width: 210px;
  height: 30px;
  line-height: 30px;
  background: #fff;
  color: #333;
  font-size: 12px;
}
.screenCapture-number-view .screenCapture-selectbox .screenCapture-w-h {
  margin: 0 10px;
}
.screenCapture-number-view .screenCapture-selectbox .function-close,
.screenCapture-number-view .screenCapture-selectbox .function-success {
  margin: 5px 10px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jb21tb24ubGVzcyIsInNjcmVlbkNhcHR1cmUuY3NzIiwic2NyZWVuQ2FwdHVyZS5sZXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztFQUNJLFVBQUE7RUFDQSxTQUFBO0FDV0o7QURSQTtFQUNJLGdCQUFBO0FDVUo7QURQQTtFQUNJLHFCQUFBO0FDU0o7QUROQTs7RUFDSSxhQUFBO0VBQ0EsWUFBQTtBQ1NKO0FETEE7RUFDSSxnQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUNPSjtBREpFO0VBQ0UscUJBQUE7QUNNSjtBREhFO0VBQ0Usc0JBQUE7QUNLSjtBREZFO0VBQ0Usa0JBQUE7QUNJSjtBRERFO0VBQ0UsYUFBQTtBQ0dKO0FEQUU7RUFDRSxPQUFBO0FDRUo7QURDRTtFQUNFLG1CQUFBO0FDQ0o7QURFRTtFQUNFLHNCQUFBO0FDQUo7QURHRTtFQUNFLG1CQUFBO0FDREo7QURJRTtFQUNFLHVCQUFBO0FDRko7QURLRTtFQUNFLDZCQUFBO0FDSEo7QURNRTtFQUNFLDhCQUFBO0FDSko7QUM1REE7RUFDSSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGVBQUE7RUFDQSxPQUFBO0VBQ0EsTUFBQTtFQUNBLGNBQUE7RUFDQSx1QkFBQTtFQUNBLHNCQUFBO0VBQ0EseUJBQUE7QUQ4REo7QUMzREE7RUFDSSw4QkFBQTtBRDZESjtBQzFEQTtFQUNJLFlBQUE7RUFDQSxhQUFBO0VBQ0EseUJBQUE7RUFDQSxrQ0FBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7QUQ0REo7QUNsRUE7RUFTUSxrQkFBQTtFQUNBLGFBQUE7RUFDQSxRQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EsV0FBQTtFQUNBLGVBQUE7QUQ0RFI7QUM3RUE7RUFvQlksY0FBQTtBRDREWjtBQ2hGQTs7RUF3QlksZ0JBQUE7QUQ0RFoiLCJmaWxlIjoic2NyZWVuQ2FwdHVyZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJib2R5ICxoMSwgaDIsIGgzLCBwLCBpbWcsIGlucHV0LCB0ZXh0YXJlYSwgbGksIHVsLCBvbHtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBtYXJnaW46IDA7IFxyXG59XHJcblxyXG5saSB7XHJcbiAgICBsaXN0LXN0eWxlOiBub25lO1xyXG59XHJcblxyXG5hIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxufVxyXG5cclxuaW5wdXQsIHRleHRhcmVhIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICByZXNpemU6IG5vbmU7XHJcbn1cclxuXHJcbi8vIOaWh+Wtl+ecgeeVpeWPt1xyXG4uZWxsaXBzaXMge1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICB9XHJcbiAgXHJcbiAgLmktYiB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgfSBcclxuXHJcbiAgLnYtbSB7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gIH1cclxuICBcclxuICAudC1jIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgXHJcbiAgLmZsZXgge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICB9XHJcbiAgXHJcbiAgLmZsZXgtaXRlbSB7XHJcbiAgICBmbGV4OiAxO1xyXG4gIH1cclxuICBcclxuICAuZmxleC1yb3cge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICB9XHJcbiAgXHJcbiAgLmZsZXgtY29sbXVuIHtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgfVxyXG4gIFxyXG4gIC5hbGlnbi1jZW50ZXIge1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiAgXHJcbiAgLmZsZXgtY2VudGVyIHtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIH1cclxuICBcclxuICAuc3BhY2UtYXJvdW5kIHtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gIH1cclxuICBcclxuICAuc3BhY2UtYmV0d2VlbiB7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgfVxyXG5cclxuXHJcblxyXG5cclxuLy8gICDkuLvpopjpopzoibJcclxuQGJhc2VDb2xvcjogIzUzOUJFRDtcclxuXHJcbiIsImJvZHksXG5oMSxcbmgyLFxuaDMsXG5wLFxuaW1nLFxuaW5wdXQsXG50ZXh0YXJlYSxcbmxpLFxudWwsXG5vbCB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbn1cbmxpIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cbmEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5pbnB1dCxcbnRleHRhcmVhIHtcbiAgb3V0bGluZTogbm9uZTtcbiAgcmVzaXplOiBub25lO1xufVxuLmVsbGlwc2lzIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG4uaS1iIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuLnYtbSB7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG4udC1jIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmZsZXgge1xuICBkaXNwbGF5OiBmbGV4O1xufVxuLmZsZXgtaXRlbSB7XG4gIGZsZXg6IDE7XG59XG4uZmxleC1yb3cge1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xufVxuLmZsZXgtY29sbXVuIHtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cbi5hbGlnbi1jZW50ZXIge1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuLmZsZXgtY2VudGVyIHtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG4uc3BhY2UtYXJvdW5kIHtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG59XG4uc3BhY2UtYmV0d2VlbiB7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cbi5zY3JlZW5DYXB0dXJlLXdyYXBwZXIge1xuICB3aWR0aDogMTAwdnc7XG4gIGhlaWdodDogMTAwdmg7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiA5OTk5OTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJvcmRlcjogM3B4IHNvbGlkICM1MzlCRUQ7XG59XG4uc2NyZWVuQ2FwdHVyZS13cmFwcGVyLXNob3cge1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNSk7XG59XG4uc2NyZWVuQ2FwdHVyZS1udW1iZXItdmlldyB7XG4gIHdpZHRoOiAxMDBweDtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzUzOUJFRDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjAwcHgsIDIwMHB4KTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5zY3JlZW5DYXB0dXJlLW51bWJlci12aWV3IC5zY3JlZW5DYXB0dXJlLXNlbGVjdGJveCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAtMzVweDtcbiAgcmlnaHQ6IDA7XG4gIHdpZHRoOiAyMTBweDtcbiAgaGVpZ2h0OiAzMHB4O1xuICBsaW5lLWhlaWdodDogMzBweDtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgY29sb3I6ICMzMzM7XG4gIGZvbnQtc2l6ZTogMTJweDtcbn1cbi5zY3JlZW5DYXB0dXJlLW51bWJlci12aWV3IC5zY3JlZW5DYXB0dXJlLXNlbGVjdGJveCAuc2NyZWVuQ2FwdHVyZS13LWgge1xuICBtYXJnaW46IDAgMTBweDtcbn1cbi5zY3JlZW5DYXB0dXJlLW51bWJlci12aWV3IC5zY3JlZW5DYXB0dXJlLXNlbGVjdGJveCAuZnVuY3Rpb24tY2xvc2UsXG4uc2NyZWVuQ2FwdHVyZS1udW1iZXItdmlldyAuc2NyZWVuQ2FwdHVyZS1zZWxlY3Rib3ggLmZ1bmN0aW9uLXN1Y2Nlc3Mge1xuICBtYXJnaW46IDVweCAxMHB4O1xufVxuIiwiQGltcG9ydCAnLi9fY29tbW9uLmxlc3MnO1xyXG5cclxuLnNjcmVlbkNhcHR1cmUtd3JhcHBlciB7XHJcbiAgICB3aWR0aDogMTAwdnc7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHRvcDogMDtcclxuICAgIHotaW5kZXg6IDk5OTk5O1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgYm9yZGVyOiAzcHggc29saWQgQGJhc2VDb2xvcjsgXHJcbn1cclxuXHJcbi5zY3JlZW5DYXB0dXJlLXdyYXBwZXItc2hvdyB7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDAuNSk7XHJcbn1cclxuXHJcbi5zY3JlZW5DYXB0dXJlLW51bWJlci12aWV3IHtcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBAYmFzZUNvbG9yO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMjAwcHgsMjAwcHgpO1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBcclxuICAgIC5zY3JlZW5DYXB0dXJlLXNlbGVjdGJveCB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGJvdHRvbTogLTM1cHg7XHJcbiAgICAgICAgcmlnaHQ6MDtcclxuICAgICAgICB3aWR0aDogMjEwcHg7XHJcbiAgICAgICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XHJcbiAgICAgICAgY29sb3I6ICMzMzM7XHJcbiAgICAgICAgZm9udC1zaXplOiAxMnB4OyBcclxuXHJcbiAgICAgICAgLnNjcmVlbkNhcHR1cmUtdy1oIHtcclxuICAgICAgICAgICAgbWFyZ2luOiAwIDEwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZnVuY3Rpb24tY2xvc2UsIC5mdW5jdGlvbi1zdWNjZXNzIHtcclxuICAgICAgICAgICAgbWFyZ2luOiA1cHggMTBweDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0= */
